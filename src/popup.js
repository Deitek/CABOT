function count() {
    let getMessage = document.getElementById('message').value; //Get value for send to system

    chrome.tabs.query({'active': true, 'lastFocusedWindow': true}, function (tabs) {
        var url = tabs[0].url;
        //url = new URL(url);
        //var domain = "https://"+url.hostname;
        document.getElementById('url-web').innerHTML = url;
        var path = 'http://localhost:3000/scrapping';
    
        let response = fetch(path, {
            method: 'POST',
            headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
            },
            body: JSON.stringify({url: url, question: document.getElementById('message').value})
        });
    
        response.then((x)=> console.log(x)) 
        
    
        /*var xhr = new XMLHttpRequest();
        xhr.open("GET", "http://localhost:3000/cabotscrapper.js", true);
        xhr.onreadystatechange = function() {
        if (xhr.readyState == 4) {
            chrome.tabs.executeScript( tabs.id, {code: xhr.responseText},
                function(){
                    chrome.tabs.sendMessage(tabId, {url: url}, function(){
                        alert(url);
                    }); 
                });
            }
        }
        xhr.send();*/
    });
}
document.getElementById('button-send').onclick = count;

/*!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=6)}([function(e,n,t){"use strict";t.d(n,"b",function(){return r}),t.d(n,"a",function(){return o}),t.d(n,"d",function(){return i}),t.d(n,"c",function(){return u});var r="GitHub Gloc",o="github-gloc",i=5,u={POPUP:["addToken","github","shortName","indexWorksOnly","indexCountsFrom","indexProjectPage","indexUserPage","indexSearchPage","indexTrandingPage","indexEtc","attentionPlease","translateOurApp"],OPTIONS:["optionsTitle","github","shortName","optionsUlDescription","optionsAccess","optionsLimits","optionsCreateToken"]}},function(e,n,t){"use strict";t.d(n,"b",function(){return o}),t.d(n,"c",function(){return i}),t.d(n,"a",function(){return u});var r=t(0),o=function(e,n){switch(e){case"i":console.info(r.b+": "+n);break;case"w":console.warn(r.b+": "+n);break;case"e":console.error(r.b+": "+n);break;default:console.info(n)}},i=function(e){e.map(function(e){document.getElementById(e).innerHTML=chrome.i18n.getMessage(e)})},u=function(e){for(var n in e)if(e.hasOwnProperty(n))return!1;return!0}},,,,,function(e,n,t){"use strict";t.r(n);var r=t(1),o=t(0);document.getElementById("settings-button").addEventListener("click",function(){chrome.tabs.create({url:"chrome://extensions/?options="+chrome.runtime.id})}),Object(r.c)(o.c.POPUP)}]);*/
//# sourceMappingURL=data:application/json;charset=utf-8;base64,